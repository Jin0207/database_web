인덱스
		검색이나 조건식에 자주 사용하는 컬럼에 대하여 색인표를 만드는 것
		인덱스를 만들어 두면 검색시에 속도를 빠르게 할 수 있다.
		
		그러나, 데이터양이 적을 때에는 속도가 빠른지 체감할 수 없음
		
		데이터의 수정, 삭제가 빈번한 컬럼에 인덱스를 설정하게 되면,
		오히려 성능저하에 요인이 된다.
		
		인덱스를 만들고 난 다음
		변경된 데이터가 있다면,
		다시 인덱스를 재구성 해주어야한다.
		
인덱스 만드는 방법
	create index 인덱스이름 on 테이블명(컬럼명)

인덱스 수정(재구성)하는 방법
	alter index 인덱스이름 rebuild

인덱스를 삭제하는 방법
	drop index 인덱스이름
	
---
	customer의 name으로 인덱스 생성
		create index idx_customer_name on customer(name);
		
		select * from customer where name = '윤석열';
		
	고객번호 6번의 이름을 '윤자바'로 수정
	update customer set name = '윤자바' where custid = 6;
	select * from customer where name = '윤자바';
	==> 이와 같이 인덱스를 만들어 둔 데이터에 수정이 있다면 오히려 인덱스가 검색속도를 저하시킨다.
	
	인덱스 재구성
	alter index idx_customer_name rebuild;
	
인덱스가 효과를 발휘하려면
	데이터 수정이 빈번하지 않아야하고
	인덱스를 설정한 컬럼의 같은값의 종류가 많지 않아야한다.
	
	컬럼의 값의 종류가 많지 않아
	ex) 국적의 종류가 3가지임 '대한민국', '미국', '캐나다'
	이럴 때에는 인덱스가 오히려 성능을 저하시키는 요인이 된다.

인덱스 삭제
drop index idx_customer_name;


'뷰'의 삭제
	뷰는 실제로 존재하는 테이블이 아니기 때문에
	alter 명령어로 수정할 수 없다
	
	수정하려면 view를 삭제 한 후에 재생성 하거나
	뷰이름이 있으면 생성해주고 있으면 덮어씌우는 create or replace 명령어를 사용한다
	
	create or replace view 뷰이름
	as
	select ~;

==============================================================================================

데이터베이스 프로그래밍
	PL/SQL
		Procedual Language Structured Query Language
		
		오라클 안에서의 프로그램
		==> 오라클 전용 프로그램 언어
		
-------------------------------------------------------------

PL/SQL을 이용하여 자바의 '메소드'와 같은 것을 만들 수 있다.
 그 중 하나가 '프로시저'
 
 ------------------------------------------------------
 **'프로시저' 만들기
 	create procedure 프로시저이름(
 	변수이름 모드 자료형,
 	변수이름2 모드 자료형,
 	...
 	) //매개변수
 	as
 	지역변수(들) 선언
 	begin
 	프로시저가 해야할 sql명령어(들)
 	end;
 	
 	자료형
 	%TYPE
 		똑같은 자료형
 	
 	모드의 종류 -- 생략하면 in
 	in
 		입력용 --프로시저가 일을 하기위해 변수를 받아들이는 것
 	out
 		출력용
 
 	도서번호, 도서명, 출판사, 가격을 매개변수로 전달받아 도서를 추가하는 프로시저를 만들고
 	프로시저를 호출하여 insert를 수행해 봅니다.
 	
 	create or replace procedure InsertBook(
 		myBookID in book.bookid%TYPE,
 		myBookName in book.bookname%TYPE,
 		myPublisher in book.publisher%TYPE,
 		myPrice in book.price%TYPE
 	)
 	as
 	begin
 	insert into book values(myBookID, myBookName, myPublisher, myPrice);
 	end;
 	/
 
 경고: 컴파일 오류와 함께 프로시저가 생성되었습니다.
 
 show errors;
 에러를 알려줌
 
 LINE/COL ERROR
-------- -----------------------------------------------------------------
3/2      PLS-00103: 심볼 "MYBOOKNAME"를 만났습니다 다음 중 하나가 기대될
         때:
         := ) , default character
         심볼이 "," 계속하기 위하여 "MYBOOKNAME"로 치환되었습니다
 
 ------------
 
 	프로시저를 호출하여 insert를 수행해봅니다.
 	
 	exec 프로시저이름(값1, 값2,...)
 	
 	exec InsertBook(16, '재미있는 pl/sql', '쌍용미디어', 30000);
 
	도서번호와 가격을 매개변수로 전달받아
	해당 도서의 가격을 수정하는 프로시저를 만들고 호출해봅니다.
	
	create or replace procedure UpdatePrice(
		myBookID in book.bookid%TYPE,
		myBookPrice in book.price%TYPE
	)
	as
 	begin
 	update book set price = myBookPrice where bookid = myBookID;
 	end;
 	/

 	exec UpdatePrice(30000,16);
 	exec UpdatePrice(16,45000);
 
 ---
 	
 	도서번호를 매개변수로 전달받아 해당도서를 삭제하는 프로시저를 만들고 호출해본다
 	
 	create or replace procedure DeleteBook(
 		myBookID in book.bookid%TYPE
 	)
 	as
 	begin
 	delete book where bookid = myBookID;
 	end;
 	/
 	
 	exec DeleteBook(16);
 
 	--
 	
**pl/sql에서도 제어문을 사용할 수 있다.
  조건에 따라 실행할 sql을 선택하도록 제어문을 사용
  
 	--
	도서번호, 도서명, 출판사, 가격을 매개변수로 전달받아
	해당도서가 이미 있다면 도서의 가격을 수정하고
	그렇지 않다면 도서를 추가하는 프로시저 생성 후 호출
	
	create or replace procedure BookInsertOrUpdate(
		myBookID book.bookid%TYPE,
		myBookName book.bookname%TYPE,
		myPublisher book.publisher%TYPE,
		myPrice book.price%TYPE
	)
	as
	 mycount number;
	begin
	 select count(*) into mycount from book where bookname = myBookName;
	 if mycount != 0 then
	 	update book set price = myPrice where bookname = myBookName;
	 else
	 	insert into book values(myBookID, myBookName, myPublisher, myPrice);
	 end if;
	end;
	/ 
 
 	exec BookInsertOrUpdate(13, '재미있는 오라클', '쌍용미디어', 40000);
 	exec BookInsertOrUpdate(17, '즐거운JSP','쌍용미디어',35000);
 
 	--
 반환값이 있는 프로시저 만들기
 create procedure 프로시저이름
 (
 	변수명 out 자료형
 )
 as
 begin
	select 컬럼명 into 변수명 from ~~~ 
 end;
 /

==> 검색한 결과를 변수에 담아서 반환해준다.

------------------------------------------------------------------------
**반환값이 있는 프로시저 호출하기
(변수를 선언하고, 프로시저를 호출하고 반환값을 확인(출력)하기 위한 프로그램 필요)
PL/SQL 구문 필요

set serveroutput on; <=== 화면에 결과를 출력하기 위해 필요한 명령어

**PL/SQL의 기본구조
declare
	변수명 자료형; //변수선언
begin
	프로시저호출(변수명); //프로시저에서 전달하는 변수에 결과를 담아줌
	dbms_output.put_line(변수명) //결과를 콘솔에 출력하는 명령어
end;

	도서의 평균가격을 반환하는 프로시저를 생성하고 호출
	
	create or replace procedure AveragePrice(
		AverageVal out number
	)
	as
	begin
		select avg(price) into AverageVal from book where price is not null;
	end;
	/
------
	set serveroutput on; <=== cnd창을 닫기 전까지 한번만 동작시켜주면됨
----
	declare
		result number;
	begin
		AveragePrice(result);
		dbms_output.put_line('책값 평균:' || result);
	end;
	/
--
	고객명을 매개변수로 전달받아
	그 고객이 주문한 총주문건수, 총주문액을 반환하는 프로시저를 만들고
	결과를 출력해봅니다
	
	create or replace procedure getCustomerOrders(
		cname in customer.name%TYPE,
		cnt out number,
		tot out number
	)
	as
	begin
		select count(*), sum(saleprice) into cnt, tot 
		from orders 
		where custid = (select custid from customer where name = cname);
	end;
	/
	
	declare
		cnt number;
		tot number;
	begin
		getCustomerOrders('박지성',cnt,tot);
		dbms_output.put_line('총주문건수:' || cnt || ', 총주문액:' || tot);
	end;
	/

------------------------------------------------------------

반환값이 있는 프로시저 호출하는 또 다른 방법

variable 변수명 자료형;
exec 프로시저이름(:변수명)
print 변수명
------------------------------------------------------

	variable cnt number;
	variable tot number;
	exec getCustomerOrders('박지성',:cnt,:tot);
	print cnt;
	print tot;

------------------------------------------------------------

	고객번호, 이름, 주소, 전화번호를 매개변수로 전달받아
	insert를 수행하는 프로시저를 생성하고 호출해본다.
	
	create or replace procedure InsertCustomer(
		myCustID customer.custid%TYPE,
		myName customer.name%TYPE,
		myAddr customer.address%TYPE,
		myPhone customer.phone%TYPE
	)
	as
	begin
		insert into customer values(myCustID,myName,myAddr,myPhone);
	end;
	/

	exec InsertCustomer(17,'윤복희','대한민국 대전','010-1234-5678');
	
	
	고객번호, 이름, 주소, 전화번호를 매개변수로 전달받아
	해당고객의 정보를 수정하는 프로시저를 만들고 호출해봅니다.
	
	create or replace procedure UpdateCustomerInfo(
		myCustid customer.custid%TYPE,
		myName in customer.name%TYPE,
		myAddress in customer.address%TYPE,
		myPhone in customer.phone%TYPE
	)
	as
	begin
		update customer set name=myName, address=myAddress, phone=myPhone where custid = myCustid;
	end;
	/
	
	exec UpdateCustomerInfo(17, '윤바다', '대한민국 전주', '010-1234-5678');
	
	고객번호를 매개변수로 전달받아 해당 고객을 삭제하는 프로시저를 만들고 호출해봅니다.
	
	create or replace procedure DeleteCustomer(
		myCustID in customer.custid%TYPE
	)
	as
	begin
		delete customer where custid = myCustID;
	end;
	/
	
	exec DeleteCustomer(16);
	
	고객번호를 매개변수로 전달받아
	해당 고객의 이름과 전화, 주소를 반환하는 프로시저를 만들고 호출해봅니다.
	
	create or replace procedure SelectCustomerInfo(
		myCustID in customer.custid%TYPE,
		myName out customer.name%type,
		myPhone out customer.phone%type,
		myAddress out customer.address%type
	)
	as
	begin
		select name, phone, address into myName, myPhone,myAddress
		from customer
		where custid = myCustID;
	end;
	/
	
	declare
		name customer.name%type;
		phone customer.phone%type;
		addr customer.address%type;
	begin
		SelectCustomerInfo(1,name,phone,addr);
		dbms_output.put_line(name || '전화번호' || phone ||'주소:' || addr);
	end;
	/
------------------------------------------------------------------
	
	variable name varchar2;
	variable phone varchar2;
	variable addr varchar2;
	exec getCustomer(2, :name, :phone, :addr);

**varialbe로는 테이블의 칼럼의 자료형과 일치시키기 위한
	customer.name%type이 동작하지 않아
	컬럼의 값을 그대로 반환해야하는 경우에는 pl/sql 형태로 호출해야한다.
	
---------------------------------------------------------------------------

cursor의 사용
	프로시저 안에서 select한 결과가 여러 건일 때 사용한다.
	
**cursor를 사용하는 방법

	create procedure 프로시저이름(
		[매개변수(들)]
	)
	as
		[지역변수(들);]
		cusrsor 커서이름 is select문; 	<== 커서 정의
	begin
		open 커서이름					<== 커서에 정의된 select문실행
		loop							<== 반복문 수행
			fetch 커서이름 into 변수명 <== 커서의 내용을 한행씩 선언된 지역변수(들)에 담는다.
			exit when 커서이름%NOTFOUND <== 커서에 더이상 읽어올 레코드가 없다면 반복문 탈출
			처리할 문장(들)
		end loop;
		close 커서이름;
	end;
	/

-------------------------------------------------------------------------------------
연습) orders 테이블로 부터 총 판매이익을 계산하여 출력하는 프로시저를 만들고 
				호출해 봅시다. 
				판매금액이 30000원 이상이면 10%이익이고
				그렇지 않으면 5%가 이익입니다.
				
				모든 주문에 대하여 이익금을 계산하고 
				그 이익금에 총합을 누적하여 출력
				
				
select saleprice from orders;
				
set serveroutput on;
create or replace procedure Interest
as 
	cursor InterestCursor is select saleprice from orders;
	price number;
	total number;
begin
	total := 0;
	open InterestCursor;
	loop
		fetch InterestCursor into price;
		exit when InterestCursor%NOTFOUND;
		if price >= 30000 then
			total := total + price * 0.1;
		else
			total := total + price * 0.05;
		end if;
	end loop;
	close InterestCursor;
	dbms_output.put_line('전체이익금액 = ' || total);
end;
/				

exec Interest


-------------------------------------------------------------------------------------------------
연습) 고객이름을 매개변수로 전달받아 
						그 고객이 주문한 
						모든 도서명, 도서가격, 구매가격,구매일을 출력하는 프로시저를 만들고 호출 해 봅니다.
						
create or replace procedure printCustomer(
	pname customer.name%type
)
as 
	pbookname book.bookname%type;
	pprice book.price%type;
	psaleprice orders.saleprice%type;
	porderdate orders.orderdate%type;
	cursor c is select bookname, price, saleprice, orderdate 
			from customer c, book b, orders o
			where c.custid = o.custid and 
			b.bookid = o.bookid and 
			name = pname;
begin
	open c;
	loop
		fetch c into pbookname, pprice, psaleprice, porderdate ;
		exit when c%NOTFOUND;
		dbms_output.put_line(pbookname||' '|| pprice || ' ' || psaleprice || ' ' ||porderdate);
	end loop;
	close c;
end;
/

숙제

오늘날짜의 가장 많이 판매된 세권의 도서의 도서별 총판매수를 출력하는 뷰를 만들고
이것의 결과를 출력하는 웹 문서를 작성


	
	
	
		